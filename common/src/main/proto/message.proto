//grpc-service의 .proto와 같은것, 원래 중앙화된 레포지토리에서 관리되어야 하나, 편의성, 단순성 위해 common모듈에 .proto를 뒀음
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.example.grpc";
option java_outer_classname = "MessageProto";


message MessageRequestGrpc {
  string content = 1;
}

message MessageResponseGrpc {
  string reply = 1;
}

// Server Streaming RPC를 위한 요청 메시지 (예: 특정 사용자에게 보낸 메시지 목록 요청)
message UserRequest {
  string userId = 1;
}

//  Client Streaming RPC를 위한 메시지 (예: 로그 엔트리 전송)
message LogEntry {
  string level = 1;
  string message = 2;
  int64 timestamp = 3;
}

//  Client Streaming RPC의 최종 응답
message UploadStatusResponse {
  string status = 1;
  int32 receivedCount = 2;
}

// Bidirectional Streaming RPC를 위한 메시지 (예: 채팅 메시지)
message ChatMessage {
  string sender = 1;
  string message = 2;
}


service MessageService { // 서비스 이름은 MessageServiceGrpc로 생성됨

  // 1. Unary RPC (단항 RPC)
  rpc SendUnaryMessage (MessageRequestGrpc) returns (MessageResponseGrpc);

  // 2. Server Streaming RPC (서버 스트리밍)
  // 클라이언트가 단일 요청을 보내면, 서버가 여러 응답을 스트림으로 보냄
  rpc GetServerStreamMessages (UserRequest) returns (stream MessageResponseGrpc);

  // 3. Client Streaming RPC (클라이언트 스트리밍)
  // 클라이언트가 여러 요청을 스트림으로 보내면, 서버가 단일 최종 응답을 반환
  rpc SendClientStreamLogs (stream LogEntry) returns (UploadStatusResponse);

  // 4. Bidirectional Streaming RPC (양방향 스트리밍)
  // 클라이언트와 서버가 서로 독립적으로 메시지 스트림을 주고받음
  rpc Chat (stream ChatMessage) returns (stream ChatMessage);
}